'use client';
import {useEffect, useState} from 'react';
import {useRouter, useParams} from 'next/navigation';
import {Quiz} from '@/types/quize.type';
import {Progress} from '@/components/ui/progress';

export default function QuizCategoryPage() {
    const {title} = useParams<{ title: string }>();
    const uriDecod = title ? decodeURIComponent(title) : '';

    const [open, setOpen] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [quizzes, setQuizzes] = useState<Quiz[]>([]);
    const [progress, setProgress] = useState(13);

    const router = useRouter();

    // ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∫—ç—à–∞ ‚Äî
    useEffect(() => {
        if (!uriDecod) return;
        setLoading(true);
        setError(null);

        const url = `http://localhost:4200/api/tests/quizzesBycategory/${encodeURIComponent(
            uriDecod
        )}`;

        (async () => {
            try {
                const res = await fetch(url, {cache: 'no-store', credentials: 'include'});
                if (!res.ok) {
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${res.status}`);
                }

                const payload = await res.json();
                console.log('API response:', payload);

                if (Array.isArray(payload)) {
                    setQuizzes(payload);
                } else if (Array.isArray(payload.value)) {
                    setQuizzes(payload.value);
                } else {
                    console.warn('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞', payload);
                    setQuizzes([]);
                }
            } catch (e: unknown) {
                setError(e instanceof Error ? e.message : String(e));
            } finally {
                setLoading(false);
            }
        })();
    }, [uriDecod]);


    // ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî
    useEffect(() => {
        const timer = setTimeout(() => setProgress(66), 500);
        return () => clearTimeout(timer);
    }, []);

    if (loading) return <Progress value={progress} className="w-[60%]"/>;
    if (error) return <p className="text-red-600 text-center">–û—à–∏–±–∫–∞: {error}</p>;

    return (
        <div className="bg-[#f5f5f6] min-h-screen py-32 px-4">
            <div className="max-w-4xl mx-auto">
                <header className="mb-10">
                    <h1 className="text-4xl font-semibold text-blue-800 mb-4">
                        –ó–∞—â–∏—â–µ–Ω–æ: –ú–∏–Ω—Ç—Ä–∞–Ω—Å
                    </h1>
                    <div
                        className="bg-white border border-blue-100 rounded-lg p-4 shadow-sm space-y-3 text-sm text-gray-700 leading-relaxed">
                        <p>
                            –£–≤–∞–∂–∞–µ–º—ã–µ –∫—É—Ä—Å–∞–Ω—Ç—ã!<br/>
                            –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä –í–û–°–í–û–î –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º ‚Äî –Ω–∞–±. —Ä. –ü—Ä—è–∂–∫–∏ 3/1, 3 —ç—Ç–∞–∂, –∫–∞–±. 319 (–∫–æ–¥ –Ω–∞
                            –≤—Ö–æ–¥–µ 123).
                        </p>
                        <p>
                            üëâ{' '}
                            <a
                                href="/training-signup"
                                className="text-blue-700 hover:text-blue-900 underline font-medium"
                            >
                                –ó–ê–ü–ò–°–¨ –ù–ê –ü–†–ê–ö–¢–ò–ß–ï–°–ö–£–Æ –¢–†–ï–ù–ê–ñ–ï–†–ù–£–Æ –ü–û–î–ì–û–¢–û–í–ö–£
                            </a>
                        </p>
                        <p>
                            –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
                            –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
                        </p>
                        <p>
                            üëâ{' '}
                            <a
                                href="/docs-after-training"
                                className="text-blue-700 hover:text-blue-900 underline font-medium"
                            >
                                –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
                            </a>
                        </p>
                        <p className="text-red-600 font-semibold">–î–µ–º–æ-–∑–∞–ø–∏—Å—å</p>
                    </div>
                </header>

                <main className="space-y-5">
                    <section className="bg-white border rounded-lg shadow-sm">
                        <button
                            onClick={() => setOpen((o) => !o)}
                            className="w-full text-left px-5 py-4 hover:bg-gray-50"
                            aria-expanded={open}
                        >
                            <h2 className="text-lg font-medium text-blue-800">
                                –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã (–î–µ–º–æ)
                            </h2>
                            <p className="text-sm text-gray-600 mt-1">10 –≤–æ–ø—Ä–æ—Å–æ–≤, 1 –æ—à–∏–±–∫–∞</p>
                        </button>

                        {open && (
                            <div className="px-5 py-4 border-t">
                                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                                    {quizzes.length > 0 ? (
                                        quizzes.map((quiz) => (
                                            <div
                                                key={quiz.id}
                                                onClick={() => router.push(`/cabinet/${uriDecod}/${quiz.id}`)}
                                                className="text-sm px-4 py-2 bg-blue-50 hover:bg-blue-100 text-blue-800 text-center rounded-md border border-blue-100 cursor-pointer transition"
                                            >
                                                {quiz.name}
                                            </div>
                                        ))
                                    ) : (
                                        <p className="text-gray-500 text-center">
                                            –ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{uriDecod}¬ª
                                        </p>
                                    )}
                                </div>
                            </div>
                        )}
                    </section>
                </main>
            </div>
        </div>
    );
}
